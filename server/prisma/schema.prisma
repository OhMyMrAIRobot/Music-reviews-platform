// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique @db.VarChar(60)
  nickname String @unique @db.VarChar(40)
  password String
  isActive Boolean @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  roleId String @map("role_id")
  role Role @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  profile UserProfile?

  @@map("Users")
}

model Role {
  id String @id @default(cuid())
  role String @unique @db.VarChar(40)

  users User[]

  @@map("User_roles")
}

model UserProfile {
  id String @id @default(cuid())
  avatar String? @db.VarChar(255)
  coverImage String? @db.VarChar(255) @map("cover_image")
  bio String? @db.VarChar(255)
  points Int @default(0)

  userId String @unique @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  socialMedia UserSocialMedia[]

  @@map("User_profiles")
}

model SocialMedia {
  id   String @id @default(cuid())
  name String @unique @db.VarChar(40)

  users UserSocialMedia[]

  @@map("Social_media")
}

model UserSocialMedia {
  id         String @id @default(cuid())
  userId     String
  socialId   String
  url        String @db.VarChar(255)

  user       UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  social     SocialMedia @relation(fields: [socialId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, socialId])
  @@map("User_social_media")
}

