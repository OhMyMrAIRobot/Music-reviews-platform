// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique @db.VarChar(60)
  nickname  String   @unique @db.VarChar(20)
  password  String   @map("password_hash")
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  roleId String @map("role_id")
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  profile      UserProfile?
  refreshToken RefreshToken?

  @@map("Users")
}

model RefreshToken {
  id        String @id @default(cuid())
  tokenHash String @map("token_hash")

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("Refresh_tokens")
}

model Role {
  id   String @id @default(cuid())
  role String @unique @db.VarChar(40)

  users User[]

  @@map("Roles")
}

model UserProfile {
  id         String  @id @default(cuid())
  avatar     String? @db.VarChar(255)
  coverImage String? @map("cover_image") @db.VarChar(255)
  bio        String? @db.VarChar(255)
  points     Int     @default(0)

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  socialMedia ProfileSocialMedia[]

  @@map("User_profiles")
}

model SocialMedia {
  id   String @id @default(cuid())
  name String @unique @db.VarChar(40)

  profiles ProfileSocialMedia[]

  @@map("Social_media")
}

model ProfileSocialMedia {
  id        String @id @default(cuid())
  profileId String @map("profile_id")
  socialId  String @map("social_id")
  url       String @db.VarChar(255)

  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  social  SocialMedia @relation(fields: [socialId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([profileId, socialId])
  @@map("Profile_social_media")
}

model Author {
  id        String         @id @default(cuid())
  name      String         @unique @db.VarChar(50)
  avatarImg String?        @map("avatar_img") @db.VarChar(255)
  coverImg  String?        @map("cover_img") @db.VarChar(255)
  types     AuthorOnType[]

  @@map("Authors")
}

model AuthorType {
  id      String         @id @default(cuid())
  type    String         @unique @db.VarChar(30)
  authors AuthorOnType[]

  @@map("Author_types")
}

model AuthorOnType {
  authorId     String @map("author_id")
  authorTypeId String @map("author_type_id")

  author     Author     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorType AuthorType @relation(fields: [authorTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([authorId, authorTypeId])
  @@map("Authors_On_Types")
}

model ReleaseType {
  id      String   @id @default(cuid())
  type    String   @unique @db.VarChar(30)
  Release Release?

  @@map("Release_types")
}

model Release {
  id            String @id @default(cuid())
  title         String @db.VarChar(50)
  year          Int    @db.SmallInt
  img           String @db.VarChar(255)
  releaseTypeId String @unique @map("release_type_id")

  ReleaseType ReleaseType @relation(fields: [releaseTypeId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("Releases")
}
