model Author {
  id        String @id @default(cuid())
  name      String @unique @db.VarChar(50)
  avatarImg String @default("") @map("avatar_img") @db.VarChar(255)
  coverImg  String @default("") @map("cover_img") @db.VarChar(255)

  types            AuthorOnType[]
  releaseProducer  ReleaseProducer[]
  releaseArtist    ReleaseArtist[]
  releaseDesigner  ReleaseDesigner[]
  userFavAuthor    UserFavAuthor[]
  registeredAuthor RegisteredAuthor[]
  authorRequest    AuthorRequest[]

  @@map("Authors")
}

model AuthorType {
  id      String         @id @default(cuid())
  type    String         @unique @db.VarChar(30)
  authors AuthorOnType[]

  @@map("Author_types")
}

model AuthorOnType {
  authorId     String @map("author_id")
  authorTypeId String @map("author_type_id")

  author     Author     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorType AuthorType @relation(fields: [authorTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([authorId, authorTypeId])
  @@map("Authors_on_types")
}

model RegisteredAuthor {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  authorId  String   @unique @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  author Author @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, authorId])
  @@map("Registered_authors")
}

model AuthorComment {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(100)
  text      String   @db.VarChar(8500)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @map("user_id")
  releaseId String   @map("release_id")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  release Release @relation(fields: [releaseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, releaseId])
  @@map("Author_comments")
}

model AuthorRequest {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  authorId     String   @map("author_id")
  statusId     String
  confirmation String   @db.VarChar(300)
  createdAt    DateTime @default(now()) @map("created_at")

  user   User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  author Author              @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status AuthorRequestStatus @relation(fields: [statusId], references: [id], onUpdate: Cascade, onDelete: Restrict)

  @@map("Author_requests")
}

model AuthorRequestStatus {
  id     String @id @default(cuid())
  status String @unique @db.VarChar(30)

  authorRequest AuthorRequest[]

  @@map("Author_request_statuses")
}
